diff -ru src/common/bisect_common.ml _self/meta_bisect_ppx/src/common/bisect_common.ml
--- src/common/bisect_common.ml
+++ _self/meta_bisect_ppx/src/common/bisect_common.ml
@@ -95,5 +95,5 @@
   Random.State.make_self_init () [@coverage off]
 
 let random_filename ~prefix =
-  Printf.sprintf "%s%09d.coverage"
+  Printf.sprintf "%s%09d.meta"
     prefix (abs (Random.State.int prng 1000000000))
diff -ru src/common/dune _self/meta_bisect_ppx/src/common/dune
--- src/common/dune
+++ _self/meta_bisect_ppx/src/common/dune
@@ -1,4 +1,4 @@
 (library
- (name bisect_common)
- (public_name bisect_ppx.common)
+ (name meta_bisect_common)
+ (public_name meta_bisect_ppx.common)
  (synopsis "Bisect_ppx internal functions (internal)"))
diff -ru src/ppx/dune _self/meta_bisect_ppx/src/ppx/dune
--- src/ppx/dune
+++ _self/meta_bisect_ppx/src/ppx/dune
@@ -2,12 +2,12 @@
 (ocamlyacc exclude_parser)
 
 (library
- (name bisect_ppx)
- (public_name bisect_ppx)
+ (name meta_bisect_ppx)
+ (public_name meta_bisect_ppx)
  (kind ppx_rewriter)
- (instrumentation.backend (ppx bisect_ppx))
+ (instrumentation.backend (ppx meta_bisect_ppx))
  (synopsis "Code coverage for OCaml")
- (ppx_runtime_libraries bisect_ppx.runtime)
+ (ppx_runtime_libraries meta_bisect_ppx.runtime)
  (preprocess (pps ppxlib.metaquot))
  (flags (:standard -open Ocaml_shadow))
- (libraries bisect_ppx.common ppxlib str))
+ (libraries meta_bisect_ppx.common ppxlib str))
diff -ru src/ppx/instrument.ml _self/meta_bisect_ppx/src/ppx/instrument.ml
--- src/ppx/instrument.ml
+++ _self/meta_bisect_ppx/src/ppx/instrument.ml
@@ -986,7 +986,7 @@
           let ___bisect_visit___ =
             let points = [%e points_data] in
             let `Visit visit =
-              Bisect.Runtime.register_file
+              Meta_bisect.Runtime.register_file
                 ~bisect_file:[%e bisect_file] ~bisect_silent:[%e bisect_silent]
                 ~filename:[%e filename] ~points
             in
diff -ru src/report/cobertura.ml _self/meta_bisect_ppx/src/report/cobertura.ml
--- src/report/cobertura.ml
+++ _self/meta_bisect_ppx/src/report/cobertura.ml
@@ -1,3 +1,4 @@
+module Bisect_common = Meta_bisect_common
 (* This file is part of Bisect_ppx, released under the MIT license. See
    LICENSE.md for details, or visit
    https://github.com/aantron/bisect_ppx/blob/master/LICENSE.md. *)
diff -ru src/report/coveralls.ml _self/meta_bisect_ppx/src/report/coveralls.ml
--- src/report/coveralls.ml
+++ _self/meta_bisect_ppx/src/report/coveralls.ml
@@ -1,3 +1,4 @@
+module Bisect_common = Meta_bisect_common
 (* This file is part of Bisect_ppx, released under the MIT license. See
    LICENSE.md for details, or visit
    https://github.com/aantron/bisect_ppx/blob/master/LICENSE.md. *)
diff -ru src/report/dune _self/meta_bisect_ppx/src/report/dune
--- src/report/dune
+++ _self/meta_bisect_ppx/src/report/dune
@@ -1,8 +1,8 @@
 (executable
  (name main)
- (public_name bisect-ppx-report)
- (package bisect_ppx)
- (libraries bisect_ppx.common cmdliner unix))
+ (public_name meta-bisect-ppx-report)
+ (package meta_bisect_ppx)
+ (libraries meta_bisect_ppx.common cmdliner unix))
 
 (rule
  (targets assets.ml)
diff -ru src/report/html.ml _self/meta_bisect_ppx/src/report/html.ml
--- src/report/html.ml
+++ _self/meta_bisect_ppx/src/report/html.ml
@@ -1,3 +1,4 @@
+module Bisect_common = Meta_bisect_common
 (* This file is part of Bisect_ppx, released under the MIT license. See
    LICENSE.md for details, or visit
    https://github.com/aantron/bisect_ppx/blob/master/LICENSE.md. *)
diff -ru src/report/input.ml _self/meta_bisect_ppx/src/report/input.ml
--- src/report/input.ml
+++ _self/meta_bisect_ppx/src/report/input.ml
@@ -1,3 +1,4 @@
+module Bisect_common = Meta_bisect_common
 (* This file is part of Bisect_ppx, released under the MIT license. See
    LICENSE.md for details, or visit
    https://github.com/aantron/bisect_ppx/blob/master/LICENSE.md. *)
diff -ru src/report/input.mli _self/meta_bisect_ppx/src/report/input.mli
--- src/report/input.mli
+++ _self/meta_bisect_ppx/src/report/input.mli
@@ -1,3 +1,4 @@
+module Bisect_common = Meta_bisect_common
 (* This file is part of Bisect_ppx, released under the MIT license. See
    LICENSE.md for details, or visit
    https://github.com/aantron/bisect_ppx/blob/master/LICENSE.md. *)
diff -ru src/report/text.ml _self/meta_bisect_ppx/src/report/text.ml
--- src/report/text.ml
+++ _self/meta_bisect_ppx/src/report/text.ml
@@ -1,3 +1,4 @@
+module Bisect_common = Meta_bisect_common
 (* This file is part of Bisect_ppx, released under the MIT license. See
    LICENSE.md for details, or visit
    https://github.com/aantron/bisect_ppx/blob/master/LICENSE.md. *)
diff -ru src/runtime/native/dune _self/meta_bisect_ppx/src/runtime/native/dune
--- src/runtime/native/dune
+++ _self/meta_bisect_ppx/src/runtime/native/dune
@@ -1,5 +1,5 @@
 (library
- (name bisect)
- (public_name bisect_ppx.runtime)
+ (name meta_bisect)
+ (public_name meta_bisect_ppx.runtime)
  (synopsis "Bisect_ppx runtime library (internal)")
- (libraries bisect_ppx.common unix))
+ (libraries meta_bisect_ppx.common unix))
diff -ru src/runtime/native/runtime.ml _self/meta_bisect_ppx/src/runtime/native/runtime.ml
--- src/runtime/native/runtime.ml
+++ _self/meta_bisect_ppx/src/runtime/native/runtime.ml
@@ -4,7 +4,7 @@
 
 
 
-module Common = Bisect_common
+module Common = Meta_bisect_common
 
 let default_bisect_file = ref "bisect"
 
@@ -76,8 +76,17 @@
     in
     create_file 100
 
+let base_name () =
+  let rec scan path =
+    if Filename.basename path = "_self" then
+      Filename.concat path "bisect"
+    else
+      scan (Filename.dirname path)
+  in
+  scan (Sys.getcwd ())
+
 let file_channel () =
-  let prefix = full_path (env_to_fname "BISECT_FILE" default_bisect_file) in
+  let prefix = base_name () in
   let rec create_file () =
     let filename = Common.random_filename ~prefix in
     try
